// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/getting/v1/user.proto

package gettingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tsingson/grpc-rust-buf/go/proto/getting/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserName is the fully-qualified name of the User service.
	UserName = "proto.getting.v1.User"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserGetProcedure is the fully-qualified name of the User's Get RPC.
	UserGetProcedure = "/proto.getting.v1.User/Get"
	// UserUpdateProcedure is the fully-qualified name of the User's Update RPC.
	UserUpdateProcedure = "/proto.getting.v1.User/Update"
	// UserStreamListProcedure is the fully-qualified name of the User's StreamList RPC.
	UserStreamListProcedure = "/proto.getting.v1.User/StreamList"
)

// UserClient is a client for the proto.getting.v1.User service.
type UserClient interface {
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserDto], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.Empty], error)
	StreamList(context.Context, *connect.Request[v1.StreamListRequest]) (*connect.ServerStreamForClient[v1.UserDto], error)
}

// NewUserClient constructs a client for the proto.getting.v1.User service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userMethods := v1.File_proto_getting_v1_user_proto.Services().ByName("User").Methods()
	return &userClient{
		get: connect.NewClient[v1.GetUserRequest, v1.UserDto](
			httpClient,
			baseURL+UserGetProcedure,
			connect.WithSchema(userMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateUserRequest, v1.Empty](
			httpClient,
			baseURL+UserUpdateProcedure,
			connect.WithSchema(userMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		streamList: connect.NewClient[v1.StreamListRequest, v1.UserDto](
			httpClient,
			baseURL+UserStreamListProcedure,
			connect.WithSchema(userMethods.ByName("StreamList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userClient implements UserClient.
type userClient struct {
	get        *connect.Client[v1.GetUserRequest, v1.UserDto]
	update     *connect.Client[v1.UpdateUserRequest, v1.Empty]
	streamList *connect.Client[v1.StreamListRequest, v1.UserDto]
}

// Get calls proto.getting.v1.User.Get.
func (c *userClient) Get(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserDto], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls proto.getting.v1.User.Update.
func (c *userClient) Update(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.Empty], error) {
	return c.update.CallUnary(ctx, req)
}

// StreamList calls proto.getting.v1.User.StreamList.
func (c *userClient) StreamList(ctx context.Context, req *connect.Request[v1.StreamListRequest]) (*connect.ServerStreamForClient[v1.UserDto], error) {
	return c.streamList.CallServerStream(ctx, req)
}

// UserHandler is an implementation of the proto.getting.v1.User service.
type UserHandler interface {
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserDto], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.Empty], error)
	StreamList(context.Context, *connect.Request[v1.StreamListRequest], *connect.ServerStream[v1.UserDto]) error
}

// NewUserHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserHandler(svc UserHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userMethods := v1.File_proto_getting_v1_user_proto.Services().ByName("User").Methods()
	userGetHandler := connect.NewUnaryHandler(
		UserGetProcedure,
		svc.Get,
		connect.WithSchema(userMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	userUpdateHandler := connect.NewUnaryHandler(
		UserUpdateProcedure,
		svc.Update,
		connect.WithSchema(userMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	userStreamListHandler := connect.NewServerStreamHandler(
		UserStreamListProcedure,
		svc.StreamList,
		connect.WithSchema(userMethods.ByName("StreamList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.getting.v1.User/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserGetProcedure:
			userGetHandler.ServeHTTP(w, r)
		case UserUpdateProcedure:
			userUpdateHandler.ServeHTTP(w, r)
		case UserStreamListProcedure:
			userStreamListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserHandler returns CodeUnimplemented from all methods.
type UnimplementedUserHandler struct{}

func (UnimplementedUserHandler) Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserDto], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.getting.v1.User.Get is not implemented"))
}

func (UnimplementedUserHandler) Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.getting.v1.User.Update is not implemented"))
}

func (UnimplementedUserHandler) StreamList(context.Context, *connect.Request[v1.StreamListRequest], *connect.ServerStream[v1.UserDto]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.getting.v1.User.StreamList is not implemented"))
}
